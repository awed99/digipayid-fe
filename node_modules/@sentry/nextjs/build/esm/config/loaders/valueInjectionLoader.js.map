{"version":3,"file":"valueInjectionLoader.js","sources":["../../../../src/config/loaders/valueInjectionLoader.ts"],"sourcesContent":["import type { LoaderThis } from './types';\n\ntype LoaderOptions = {\n  values: Record<string, unknown>;\n};\n\n/**\n * Set values on the global/window object at the start of a module.\n *\n * Options:\n *   - `values`: An object where the keys correspond to the keys of the global values to set and the values\n *        correspond to the values of the values on the global object. Values must be JSON serializable.\n */\nexport default function valueInjectionLoader(this: LoaderThis<LoaderOptions>, userCode: string): string {\n  // We know one or the other will be defined, depending on the version of webpack being used\n  const { values } = 'getOptions' in this ? this.getOptions() : this.query;\n\n  // We do not want to cache injected values across builds\n  this.cacheable(false);\n\n  const injectedCode = Object.entries(values)\n    .map(([key, value]) => `globalThis[\"${key}\"] = ${JSON.stringify(value)};`)\n    .join('\\n');\n\n  return `${injectedCode}\\n${userCode}`;\n}\n"],"names":[],"mappings":"AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAAS,oBAAoB,EAAkC,QAAQ,EAAkB;AACxG;AACA,EAAE,MAAM,EAAE,MAAA,EAAS,GAAE,gBAAgB,IAAA,GAAO,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,KAAK,CAAA;AAC1E;AACA;AACA,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;AACvB;AACA,EAAE,MAAM,YAAa,GAAE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAA;AAC5C,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,YAAY,EAAE,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;AAC7E,KAAK,IAAI,CAAC,IAAI,CAAC,CAAA;AACf;AACA,EAAE,OAAO,CAAC,EAAA,YAAA,CAAA,EAAA,EAAA,QAAA,CAAA,CAAA,CAAA;AACA;;;;"}