{"version":3,"file":"node-fetch.js","sources":["../../../src/integrations/node-fetch.ts"],"sourcesContent":["import type { UndiciRequest, UndiciResponse } from '@opentelemetry/instrumentation-undici';\nimport { UndiciInstrumentation } from '@opentelemetry/instrumentation-undici';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, addBreadcrumb, defineIntegration } from '@sentry/core';\nimport { addOpenTelemetryInstrumentation } from '@sentry/opentelemetry';\nimport type { IntegrationFn, SanitizedRequestData } from '@sentry/types';\nimport { getSanitizedUrlString, parseUrl } from '@sentry/utils';\n\ninterface NodeFetchOptions {\n  /**\n   * Whether breadcrumbs should be recorded for requests.\n   * Defaults to true\n   */\n  breadcrumbs?: boolean;\n\n  /**\n   * Do not capture spans or breadcrumbs for outgoing fetch requests to URLs where the given callback returns `true`.\n   * This controls both span & breadcrumb creation - spans will be non recording if tracing is disabled.\n   */\n  ignoreOutgoingRequests?: (url: string) => boolean;\n}\n\nconst _nativeNodeFetchIntegration = ((options: NodeFetchOptions = {}) => {\n  const _breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n  const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      const instrumentation = new UndiciInstrumentation({\n        requireParentforSpans: false,\n        ignoreRequestHook: request => {\n          const url = getAbsoluteUrl(request.origin, request.path);\n          const shouldIgnore = _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);\n\n          return !!shouldIgnore;\n        },\n        startSpanHook: () => {\n          return {\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.node_fetch',\n          };\n        },\n        responseHook: (_, { request, response }) => {\n          if (_breadcrumbs) {\n            addRequestBreadcrumb(request, response);\n          }\n        },\n      });\n\n      addOpenTelemetryInstrumentation(instrumentation);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const nativeNodeFetchIntegration = defineIntegration(_nativeNodeFetchIntegration);\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request: UndiciRequest, response: UndiciResponse): void {\n  const data = getBreadcrumbData(request);\n\n  addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: response.statusCode,\n        ...data,\n      },\n      type: 'http',\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request: UndiciRequest): Partial<SanitizedRequestData> {\n  try {\n    const url = new URL(request.path, request.origin);\n    const parsedUrl = parseUrl(url.toString());\n\n    const data: Partial<SanitizedRequestData> = {\n      url: getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch {\n    return {};\n  }\n}\n\n// Matching the behavior of the base instrumentation\nfunction getAbsoluteUrl(origin: string, path: string = '/'): string {\n  const url = `${origin}`;\n\n  if (url.endsWith('/') && path.startsWith('/')) {\n    return `${url}${path.slice(1)}`;\n  }\n\n  if (!url.endsWith('/') && !path.startsWith('/')) {\n    return `${url}/${path.slice(1)}`;\n  }\n\n  return `${url}${path}`;\n}\n"],"names":[],"mappings":"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"}