import * as react_jsx_runtime from 'react/jsx-runtime';
import { ReactNode, CSSProperties } from 'react';
import { TextFieldProps } from '@mui/material/TextField';

type OtpTextFieldProps = TextFieldProps & {
    value: string | undefined;
    index: number;
    handleChange: (value: string, index: number, forward: boolean) => void;
    handlePaste: (value: string) => void;
};
type MuiTextFieldProps = Omit<TextFieldProps, "value" | "onChange" | "onPaste" | "type">;

type InputTypes = "text" | "number" | "password";
interface MuiOtpContainerProps {
    length: number;
    seperator?: ReactNode;
    onChange?: (otp: string) => void;
    onComplete?: (otp: string) => void;
    value?: string | number;
    containerStyles?: CSSProperties;
    MuiTextFieldProps?: MuiTextFieldProps;
    type?: InputTypes;
    enableFocus?: boolean;
}

declare const MuiOtp: ({ length, value, onChange, onComplete, seperator, containerStyles, MuiTextFieldProps, enableFocus, type, }: MuiOtpContainerProps) => react_jsx_runtime.JSX.Element;

interface UseFocusProps {
    selector?: string;
    enable?: boolean;
}
declare const useFocus: ({ enable, selector, }: UseFocusProps) => {
    focus: (index: number) => void;
};

interface UseInitialFocus extends UseFocusProps {
}
declare const useInitialFocus: ({ ...attr }: UseInitialFocus) => void;

declare const mutateString: (original: string, value: string, index: number) => string;
declare const isValid: (isNumeric: boolean, value: string) => boolean;
declare const split: (value: string) => string[];
declare const getValidCharacters: (isNumeric: boolean, value: string) => string;

export { type InputTypes, MuiOtp, type MuiOtpContainerProps, type MuiTextFieldProps, type OtpTextFieldProps, type UseInitialFocus, getValidCharacters, isValid, mutateString, split, useFocus, useInitialFocus };
