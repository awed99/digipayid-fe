{"version":3,"file":"../pages/api/set-storage.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGe,eAAeA,UAAf,CAA0BC,GAA1B,EAA+BC,GAA/B,EAAoC;AACjD,EAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,GAAAA;AAAP,GAAeC,GAAAA,IAAI,CAACC,KAAL,CAAWL,GAAG,CAACM,IAAf,CAArB,CADiD;AAIjD;AACA;;AACA,QAAMC,gDAAA,CAAUL,GAAV,EAAeC,GAAf,CAAN;AACAF,EAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnB,IAACR,CAAAA,GAAD,GAAOC,GADY;AAEnBQ,IAAAA,OAAO,EAAE;AAFU,GAArB;AAID;;;;;;;ACVD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,aAAa,GAAG,qBAAqB,EAAE;AAC7C;AACA;AACA;AACA,IAAI,mBAAmB,GAAG,SAAS,CAAC;AACpC;AACA,IAAI,SAAS,IAAI,aAAa,IAAI,OAAO,aAAa,CAAC,OAAO,KAAK,UAAU,EAAE;AAC/E;AACA,EAAE,mBAAmB,GAAG,aAAa,CAAC,OAAO,CAAC;AAC9C,CAAC,MAAM,IAAI,OAAO,aAAa,KAAK,UAAU,EAAE;AAChD;AACA,EAAE,mBAAmB,GAAG,aAAa,CAAC;AACtC,CAAC;AACD;AACA,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,IAAI,EAAE,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACK,MAAC,MAAM,GAAG;AACf,EAAE,GAAG,UAAU;AACf,EAAE,GAAG,EAAE;AACP,IAAI,GAAG,UAAU,CAAC,GAAG;AACrB,IAAI,gBAAgB,EAAE,IAAI;AAC1B,GAAG;AACH,EAAE;AACF;AACA,IAAI,cAAc,GAAG,mBAAmB,CAAC;AACzC;AACA,IAAI,cAAc,IAAI,SAAS,EAAE;AACjC,EAAE,cAAc,GAAG,+EAA0C,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;AACzF,CAAC;AACD;AACA,IAAI,cAAc,EAAE;AACpB,EAAE,cAAc,GAAG,oEAA+B,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;AACvF,CAAC;AACD;AACK,MAAC,gBAAgB,GAAG;;;;;;;;;;ACnDzB;;;;;;;ACAA","sources":["webpack://DIGIPAYID/src/pages/api/set-storage.js","webpack://DIGIPAYID/sentry-wrapper-module","webpack://DIGIPAYID/external \"@sentry/nextjs\"","webpack://DIGIPAYID/external \"store\""],"sourcesContent":["// // ** Layout Import\nimport store from 'store'\n\nexport default async function setSession(req, res) {\n  const { key, val } = JSON.parse(req.body)\n\n  // Then save the post data to a database\n  // console.log('key: ', key)\n  // console.log('val: ', val)\n  await store.set(key, val)\n  res.status(200).json({\n    [key]: val,\n    message: 'Store updated successfully.'\n  })\n}\n","import * as Sentry from '@sentry/nextjs';\nimport * as serverComponentModule from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nexport * from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\n\n/*\n * This file is a template for the code which will be substituted when our webpack loader handles API files in the\n * `pages/` directory.\n *\n * We use `__SENTRY_WRAPPING_TARGET_FILE__.cjs` as a placeholder for the path to the file being wrapped. Because it's not a real package,\n * this causes both TS and ESLint to complain, hence the pragma comments below.\n */\n\n\nconst userApiModule = serverComponentModule ;\n\n// Default to undefined. It's possible for Next.js users to not define any exports/handlers in an API route. If that is\n// the case Next.js wil crash during runtime but the Sentry SDK should definitely not crash so we need tohandle it.\nlet userProvidedHandler = undefined;\n\nif ('default' in userApiModule && typeof userApiModule.default === 'function') {\n  // Handle when user defines via ESM export: `export default myFunction;`\n  userProvidedHandler = userApiModule.default;\n} else if (typeof userApiModule === 'function') {\n  // Handle when user defines via CJS export: \"module.exports = myFunction;\"\n  userProvidedHandler = userApiModule;\n}\n\nconst origConfig = userApiModule.config || {};\n\n// Setting `externalResolver` to `true` prevents nextjs from throwing a warning in dev about API routes resolving\n// without sending a response. It's a false positive (a response is sent, but only after we flush our send queue), and\n// we throw a warning of our own to tell folks that, but it's better if we just don't have to deal with it in the first\n// place.\nconst config = {\n  ...origConfig,\n  api: {\n    ...origConfig.api,\n    externalResolver: true,\n  },\n};\n\nlet wrappedHandler = userProvidedHandler;\n\nif (wrappedHandler && undefined) {\n  wrappedHandler = Sentry.wrapApiHandlerWithSentryVercelCrons(wrappedHandler, undefined);\n}\n\nif (wrappedHandler) {\n  wrappedHandler = Sentry.wrapApiHandlerWithSentry(wrappedHandler, '/api/set-storage');\n}\n\nconst wrappedHandler$1 = wrappedHandler;\n\nexport { config, wrappedHandler$1 as default };\n","module.exports = require(\"@sentry/nextjs\");","module.exports = require(\"store\");"],"names":["setSession","req","res","key","val","JSON","parse","body","store","set","status","json","message"],"sourceRoot":""}