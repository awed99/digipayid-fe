{"version":3,"file":"static/chunks/pages/sample/tables-2afb14f1227da852.js","mappings":"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","sources":["webpack://_N_E/?f442","webpack://_N_E/./src/views/tables/TableBasic.js","webpack://_N_E/./src/views/tables/TableDense.js","webpack://_N_E/./src/views/tables/TableSpanning.js","webpack://_N_E/./src/views/tables/TableCustomized.js","webpack://_N_E/./src/views/tables/TableCollapsible.js","webpack://_N_E/./src/views/tables/TableStickyHeader.js","webpack://_N_E/./src/pages/sample/tables/index.js"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/sample/tables\",\n      function () {\n        return require(\"private-next-pages/sample/tables/index.js\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/sample/tables\"])\n      });\n    }\n  ","// ** MUI Imports\nimport Paper from '@mui/material/Paper'\nimport Table from '@mui/material/Table'\nimport TableRow from '@mui/material/TableRow'\nimport TableHead from '@mui/material/TableHead'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\n\nconst createData = (name, calories, fat, carbs, protein) => {\n  return { name, calories, fat, carbs, protein }\n}\n\nconst rows = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  createData('Eclair', 262, 16.0, 24, 6.0),\n  createData('Cupcake', 305, 3.7, 67, 4.3),\n  createData('Gingerbread', 356, 16.0, 49, 3.9)\n]\n\nconst TableBasic = () => {\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} aria-label='simple table'>\n        <TableHead>\n          <TableRow>\n            <TableCell>Dessert (100g serving)</TableCell>\n            <TableCell align='right'>Calories</TableCell>\n            <TableCell align='right'>Fat (g)</TableCell>\n            <TableCell align='right'>Carbs (g)</TableCell>\n            <TableCell align='right'>Protein (g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map(row => (\n            <TableRow\n              key={row.name}\n              sx={{\n                '&:last-of-type td, &:last-of-type th': {\n                  border: 0\n                }\n              }}\n            >\n              <TableCell component='th' scope='row'>\n                {row.name}\n              </TableCell>\n              <TableCell align='right'>{row.calories}</TableCell>\n              <TableCell align='right'>{row.fat}</TableCell>\n              <TableCell align='right'>{row.carbs}</TableCell>\n              <TableCell align='right'>{row.protein}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default TableBasic\n","// ** MUI Imports\nimport Paper from '@mui/material/Paper'\nimport Table from '@mui/material/Table'\nimport TableRow from '@mui/material/TableRow'\nimport TableHead from '@mui/material/TableHead'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\n\nconst createData = (name, calories, fat, carbs, protein) => {\n  return { name, calories, fat, carbs, protein }\n}\n\nconst rows = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  createData('Eclair', 262, 16.0, 24, 6.0),\n  createData('Cupcake', 305, 3.7, 67, 4.3),\n  createData('Gingerbread', 356, 16.0, 49, 3.9)\n]\n\nconst TableDense = () => {\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} size='small' aria-label='a dense table'>\n        <TableHead>\n          <TableRow>\n            <TableCell>Dessert (100g serving)</TableCell>\n            <TableCell align='right'>Calories</TableCell>\n            <TableCell align='right'>Fat (g)</TableCell>\n            <TableCell align='right'>Carbs (g)</TableCell>\n            <TableCell align='right'>Protein (g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map(row => (\n            <TableRow key={row.name} sx={{ '&:last-of-type  td, &:last-of-type  th': { border: 0 } }}>\n              <TableCell component='th' scope='row'>\n                {row.name}\n              </TableCell>\n              <TableCell align='right'>{row.calories}</TableCell>\n              <TableCell align='right'>{row.fat}</TableCell>\n              <TableCell align='right'>{row.carbs}</TableCell>\n              <TableCell align='right'>{row.protein}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default TableDense\n","// ** MUI Imports\nimport Paper from '@mui/material/Paper'\nimport Table from '@mui/material/Table'\nimport TableRow from '@mui/material/TableRow'\nimport TableHead from '@mui/material/TableHead'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\n\nconst TAX_RATE = 0.07\n\nconst ccyFormat = num => {\n  return `${num.toFixed(2)}`\n}\n\nconst priceRow = (qty, unit) => {\n  return qty * unit\n}\n\nconst createRow = (desc, qty, unit) => {\n  const price = priceRow(qty, unit)\n\n  return { desc, qty, unit, price }\n}\n\nconst subtotal = items => {\n  return items.map(({ price }) => price).reduce((sum, i) => sum + i, 0)\n}\n\nconst rows = [\n  createRow('Paperclips (Box)', 100, 1.15),\n  createRow('Paper (Case)', 10, 45.99),\n  createRow('Waste Basket', 2, 17.99)\n]\nconst invoiceSubtotal = subtotal(rows)\nconst invoiceTaxes = TAX_RATE * invoiceSubtotal\nconst invoiceTotal = invoiceTaxes + invoiceSubtotal\n\nconst TableSpanning = () => {\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 700 }} aria-label='spanning table'>\n        <TableHead>\n          <TableRow>\n            <TableCell align='center' colSpan={3}>\n              Details\n            </TableCell>\n            <TableCell align='right'>Price</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Desc</TableCell>\n            <TableCell align='right'>Qty.</TableCell>\n            <TableCell align='right'>Unit</TableCell>\n            <TableCell align='right'>Sum</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map(row => (\n            <TableRow key={row.desc}>\n              <TableCell>{row.desc}</TableCell>\n              <TableCell align='right'>{row.qty}</TableCell>\n              <TableCell align='right'>{row.unit}</TableCell>\n              <TableCell align='right'>{ccyFormat(row.price)}</TableCell>\n            </TableRow>\n          ))}\n          <TableRow>\n            <TableCell rowSpan={3} />\n            <TableCell colSpan={2}>Subtotal</TableCell>\n            <TableCell align='right'>{ccyFormat(invoiceSubtotal)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Tax</TableCell>\n            <TableCell align='right'>{`${(TAX_RATE * 100).toFixed(0)} %`}</TableCell>\n            <TableCell align='right'>{ccyFormat(invoiceTaxes)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell colSpan={2}>Total</TableCell>\n            <TableCell align='right'>{ccyFormat(invoiceTotal)}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default TableSpanning\n","// ** MUI Imports\nimport Paper from '@mui/material/Paper'\nimport Table from '@mui/material/Table'\nimport { styled } from '@mui/material/styles'\nimport TableHead from '@mui/material/TableHead'\nimport TableBody from '@mui/material/TableBody'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableRow from '@mui/material/TableRow'\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell'\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n  [`&.${tableCellClasses.head}`]: {\n    color: theme.palette.common.white,\n    backgroundColor: theme.palette.common.black\n  },\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 14\n  }\n}))\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n  '&:nth-of-type(odd)': {\n    backgroundColor: theme.palette.action.hover\n  },\n\n  // hide last border\n  '&:last-of-type td, &:last-of-type th': {\n    border: 0\n  }\n}))\n\nconst createData = (name, calories, fat, carbs, protein) => {\n  return { name, calories, fat, carbs, protein }\n}\n\nconst rows = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  createData('Eclair', 262, 16.0, 24, 6.0),\n  createData('Cupcake', 305, 3.7, 67, 4.3),\n  createData('Gingerbread', 356, 16.0, 49, 3.9)\n]\n\nconst TableCustomized = () => {\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 700 }} aria-label='customized table'>\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>Dessert (100g serving)</StyledTableCell>\n            <StyledTableCell align='right'>Calories</StyledTableCell>\n            <StyledTableCell align='right'>Fat (g)</StyledTableCell>\n            <StyledTableCell align='right'>Carbs (g)</StyledTableCell>\n            <StyledTableCell align='right'>Protein (g)</StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map(row => (\n            <StyledTableRow key={row.name}>\n              <StyledTableCell component='th' scope='row'>\n                {row.name}\n              </StyledTableCell>\n              <StyledTableCell align='right'>{row.calories}</StyledTableCell>\n              <StyledTableCell align='right'>{row.fat}</StyledTableCell>\n              <StyledTableCell align='right'>{row.carbs}</StyledTableCell>\n              <StyledTableCell align='right'>{row.protein}</StyledTableCell>\n            </StyledTableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default TableCustomized\n","// ** React Imports\nimport { useState, Fragment } from 'react'\n\n// ** MUI Imports\nimport Box from '@mui/material/Box'\nimport Paper from '@mui/material/Paper'\nimport Table from '@mui/material/Table'\nimport Collapse from '@mui/material/Collapse'\nimport TableRow from '@mui/material/TableRow'\nimport TableHead from '@mui/material/TableHead'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport Typography from '@mui/material/Typography'\nimport IconButton from '@mui/material/IconButton'\nimport TableContainer from '@mui/material/TableContainer'\n\n// ** Icons Imports\nimport ChevronUp from 'mdi-material-ui/ChevronUp'\nimport ChevronDown from 'mdi-material-ui/ChevronDown'\n\nconst createData = (name, calories, fat, carbs, protein, price) => {\n  return {\n    name,\n    calories,\n    fat,\n    carbs,\n    protein,\n    price,\n    history: [\n      {\n        date: '2020-01-05',\n        customerId: '11091700',\n        amount: 3\n      },\n      {\n        date: '2020-01-02',\n        customerId: 'Anonymous',\n        amount: 1\n      }\n    ]\n  }\n}\n\nconst Row = props => {\n  // ** Props\n  const { row } = props\n\n  // ** State\n  const [open, setOpen] = useState(false)\n\n  return (\n    <Fragment>\n      <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n        <TableCell>\n          <IconButton aria-label='expand row' size='small' onClick={() => setOpen(!open)}>\n            {open ? <ChevronUp /> : <ChevronDown />}\n          </IconButton>\n        </TableCell>\n        <TableCell component='th' scope='row'>\n          {row.name}\n        </TableCell>\n        <TableCell align='right'>{row.calories}</TableCell>\n        <TableCell align='right'>{row.fat}</TableCell>\n        <TableCell align='right'>{row.carbs}</TableCell>\n        <TableCell align='right'>{row.protein}</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell colSpan={6} sx={{ py: '0 !important' }}>\n          <Collapse in={open} timeout='auto' unmountOnExit>\n            <Box sx={{ m: 2 }}>\n              <Typography variant='h6' gutterBottom component='div'>\n                History\n              </Typography>\n              <Table size='small' aria-label='purchases'>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Customer</TableCell>\n                    <TableCell align='right'>Amount</TableCell>\n                    <TableCell align='right'>Total price ($)</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {row.history.map(historyRow => (\n                    <TableRow key={historyRow.date}>\n                      <TableCell component='th' scope='row'>\n                        {historyRow.date}\n                      </TableCell>\n                      <TableCell>{historyRow.customerId}</TableCell>\n                      <TableCell align='right'>{historyRow.amount}</TableCell>\n                      <TableCell align='right'>{Math.round(historyRow.amount * row.price * 100) / 100}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </Fragment>\n  )\n}\n\nconst rows = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0, 3.99),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3, 4.99),\n  createData('Eclair', 262, 16.0, 24, 6.0, 3.79),\n  createData('Cupcake', 305, 3.7, 67, 4.3, 2.5),\n  createData('Gingerbread', 356, 16.0, 49, 3.9, 1.5)\n]\n\nconst TableCollapsible = () => {\n  return (\n    <TableContainer component={Paper}>\n      <Table aria-label='collapsible table'>\n        <TableHead>\n          <TableRow>\n            <TableCell />\n            <TableCell>Dessert (100g serving)</TableCell>\n            <TableCell align='right'>Calories</TableCell>\n            <TableCell align='right'>Fat (g)</TableCell>\n            <TableCell align='right'>Carbs (g)</TableCell>\n            <TableCell align='right'>Protein (g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map(row => (\n            <Row key={row.name} row={row} />\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default TableCollapsible\n","// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Imports\nimport Paper from '@mui/material/Paper'\nimport Table from '@mui/material/Table'\nimport TableRow from '@mui/material/TableRow'\nimport TableHead from '@mui/material/TableHead'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TablePagination from '@mui/material/TablePagination'\n\nconst columns = [\n  { id: 'name', label: 'Name', minWidth: 170 },\n  { id: 'code', label: 'ISO\\u00a0Code', minWidth: 100 },\n  {\n    id: 'population',\n    label: 'Population',\n    minWidth: 170,\n    align: 'right',\n    format: value => value.toLocaleString('en-US')\n  },\n  {\n    id: 'size',\n    label: 'Size\\u00a0(km\\u00b2)',\n    minWidth: 170,\n    align: 'right',\n    format: value => value.toLocaleString('en-US')\n  },\n  {\n    id: 'density',\n    label: 'Density',\n    minWidth: 170,\n    align: 'right',\n    format: value => value.toFixed(2)\n  }\n]\nfunction createData(name, code, population, size) {\n  const density = population / size\n\n  return { name, code, population, size, density }\n}\n\nconst rows = [\n  createData('India', 'IN', 1324171354, 3287263),\n  createData('China', 'CN', 1403500365, 9596961),\n  createData('Italy', 'IT', 60483973, 301340),\n  createData('United States', 'US', 327167434, 9833520),\n  createData('Canada', 'CA', 37602103, 9984670),\n  createData('Australia', 'AU', 25475400, 7692024),\n  createData('Germany', 'DE', 83019200, 357578),\n  createData('Ireland', 'IE', 4857000, 70273),\n  createData('Mexico', 'MX', 126577691, 1972550),\n  createData('Japan', 'JP', 126317000, 377973),\n  createData('France', 'FR', 67022000, 640679),\n  createData('United Kingdom', 'GB', 67545757, 242495),\n  createData('Russia', 'RU', 146793744, 17098246),\n  createData('Nigeria', 'NG', 200962417, 923768),\n  createData('Brazil', 'BR', 210147125, 8515767)\n]\n\nconst TableStickyHeader = () => {\n  // ** States\n  const [page, setPage] = useState(0)\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value)\n    setPage(0)\n  }\n\n  return (\n    <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n      <TableContainer sx={{ maxHeight: 440 }}>\n        <Table stickyHeader aria-label='sticky table'>\n          <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell key={column.id} align={column.align} sx={{ minWidth: column.minWidth }}>\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n              return (\n                <TableRow hover role='checkbox' tabIndex={-1} key={row.code}>\n                  {columns.map(column => {\n                    const value = row[column.id]\n\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\n                      </TableCell>\n                    )\n                  })}\n                </TableRow>\n              )\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component='div'\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n    </Paper>\n  )\n}\n\nexport default TableStickyHeader\n","// ** MUI Imports\nimport Grid from '@mui/material/Grid'\nimport Link from '@mui/material/Link'\nimport Card from '@mui/material/Card'\nimport Typography from '@mui/material/Typography'\nimport CardHeader from '@mui/material/CardHeader'\n\n// ** Demo Components Imports\nimport TableBasic from 'src/views/tables/TableBasic'\nimport TableDense from 'src/views/tables/TableDense'\nimport TableSpanning from 'src/views/tables/TableSpanning'\nimport TableCustomized from 'src/views/tables/TableCustomized'\nimport TableCollapsible from 'src/views/tables/TableCollapsible'\nimport TableStickyHeader from 'src/views/tables/TableStickyHeader'\n\nconst MUITable = () => {\n  return (\n    <Grid container spacing={6}>\n      <Grid item xs={12}>\n        <Typography variant='h5'>\n          <Link href='https://mui.com/components/tables/' target='_blank'>\n            MUI Tables\n          </Link>\n        </Typography>\n        <Typography variant='body2'>Tables display sets of data. They can be fully customized</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <Card>\n          <CardHeader title='Basic Table' titleTypographyProps={{ variant: 'h6' }} />\n          <TableBasic />\n        </Card>\n      </Grid>\n      <Grid item xs={12}>\n        <Card>\n          <CardHeader title='Dense Table' titleTypographyProps={{ variant: 'h6' }} />\n          <TableDense />\n        </Card>\n      </Grid>\n      <Grid item xs={12}>\n        <Card>\n          <CardHeader title='Sticky Header' titleTypographyProps={{ variant: 'h6' }} />\n          <TableStickyHeader />\n        </Card>\n      </Grid>\n      <Grid item xs={12}>\n        <Card>\n          <CardHeader title='Collapsible Table' titleTypographyProps={{ variant: 'h6' }} />\n          <TableCollapsible />\n        </Card>\n      </Grid>\n      <Grid item xs={12}>\n        <Card>\n          <CardHeader title='Spanning Table' titleTypographyProps={{ variant: 'h6' }} />\n          <TableSpanning />\n        </Card>\n      </Grid>\n      <Grid item xs={12}>\n        <Card>\n          <CardHeader title='Customized Table' titleTypographyProps={{ variant: 'h6' }} />\n          <TableCustomized />\n        </Card>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default MUITable\n"],"names":["window","__NEXT_P","push","__webpack_require__","createData","name","calories","fat","carbs","protein","rows","tables_TableBasic","jsx_runtime","jsx","TableContainer","component","Paper","jsxs","Table","sx","minWidth","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","border","scope","tables_TableDense","size","ccyFormat","num","concat","toFixed","priceRow","qty","unit","createRow","desc","price","invoiceSubtotal","items","param","reduce","sum","i","invoiceTaxes","TAX_RATE","invoiceTotal","tables_TableSpanning","colSpan","rowSpan","StyledTableCell","styled","theme","tableCellClasses","head","color","palette","common","white","backgroundColor","black","body","fontSize","StyledTableRow","action","hover","tables_TableCustomized","history","date","customerId","amount","Row","props","open","setOpen","useState","Fragment","borderBottom","IconButton","onClick","ChevronUp","ChevronDown","py","Collapse","in","timeout","unmountOnExit","Box","m","Typography","variant","gutterBottom","historyRow","Math","round","tables_TableCollapsible","columns","id","label","format","value","toLocaleString","code","population","density","tables_TableStickyHeader","page","setPage","rowsPerPage","setRowsPerPage","width","overflow","maxHeight","stickyHeader","column","slice","role","tabIndex","TablePagination","rowsPerPageOptions","count","length","onPageChange","event","newPage","onRowsPerPageChange","target","tables","Grid","container","spacing","item","xs","Link","href","Card","CardHeader","title","titleTypographyProps","TableBasic","TableDense","TableStickyHeader","TableCollapsible","TableSpanning","TableCustomized"],"sourceRoot":""}